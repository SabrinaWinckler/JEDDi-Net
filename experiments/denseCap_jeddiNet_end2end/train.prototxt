# --------------------------------------------------------
# JEDDi-Net
# Copyright (c) 2018 Boston Univ.
# Licensed under The MIT License [see LICENSE for details]
# Written by Huijuan Xu
# --------------------------------------------------------

name: "activitynet"

layer {
  name: 'data'
  type: 'Python'
  top: 'data'
  top: 'gt_boxes'
  top: 'gt_captions'
  python_param {
    module: 'roi_data_layer.layer_caption'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 2"
  }
}

# ----- 1st group -----
layer {
  name: "conv1a"
  type: "Convolution"
  bottom: "data"
  top: "conv1a"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "conv1a"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1a"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 1
    kernel_size: 2
    kernel_size: 2
    stride: 1
    stride: 2
    stride: 2
  }
}

# ----- 2nd group -----
layer {
  name: "conv2a"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2a"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2a"
  type: "ReLU"
  bottom: "conv2a"
  top: "conv2a"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2a"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
    stride: 2
    stride: 2
  }
}

# ----- 3rd group -----
layer {
  name: "conv3a"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3a"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3a"
  type: "ReLU"
  bottom: "conv3a"
  top: "conv3a"
}
layer {
  name: "conv3b"
  type: "Convolution"
  bottom: "conv3a"
  top: "conv3b"
  param {
    lr_mult: 0
    decay_mult: 0
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu3b"
  type: "ReLU"
  bottom: "conv3b"
  top: "conv3b"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3b"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride:2
    stride:2
    stride:2
  }
}

# ----- 4th group -----
layer {
  name: "conv4a"
  type: "Convolution"
  bottom: "pool3"
  top: "conv4a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4a"
  type: "ReLU"
  bottom: "conv4a"
  top: "conv4a"
}
layer {
  name: "conv4b"
  type: "Convolution"
  bottom: "conv4a"
  top: "conv4b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4b"
  type: "ReLU"
  bottom: "conv4b"
  top: "conv4b"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "conv4b"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    kernel_size: 2
    kernel_size: 2
    stride: 2
    stride: 2
    stride: 2
  }
}

# ----- 5th group -----
layer {
  name: "conv5a"
  type: "Convolution"
  bottom: "pool4"
  top: "conv5a"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5a"
  type: "ReLU"
  bottom: "conv5a"
  top: "conv5a"
}

layer {
  name: "conv5b"
  type: "Convolution"
  bottom: "conv5a"
  top: "conv5b"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5b"
  type: "ReLU"
  bottom: "conv5b"
  top: "conv5b"
}

## extract fc6 video visual context feature
layer {
  name: "pool5_MAX"
  type: "Pooling"
  bottom: "conv5b"
  top: "pool5_MAX"
  pooling_param {
    pool: MAX
    kernel_size: 96
    kernel_size: 2
    kernel_size: 2
    stride: 96
    stride: 2
    stride: 2
  }
}


layer { 
  name: "gt_fc6"
  type: "InnerProduct"
  bottom: "pool5_MAX"
  top: "gt_fc6"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "gt_relu6"
  type: "ReLU"
  bottom: "gt_fc6"
  top: "gt_fc6"
}
layer {
 name: "gt_drop6"
 type: "Dropout"
 bottom: "gt_fc6"
 top: "gt_fc6"
 dropout_param {
   dropout_ratio: 0.5
 }
}


#========= RPN ============

layer {
  name: "rpn_conv/3x3"
  type: "Convolution"
  bottom: "conv5b"
  top: "rpn/output"
  param { 
    lr_mult: 1
    decay_mult: 1
  }
  param { 
    lr_mult: 2 
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    stride: 1
    stride: 2
    stride: 2
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}
layer {
  name: "rpn_conv/3x3_2"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn/output_2"
  param { 
    lr_mult: 1
    decay_mult: 1
  }
  param { 
    lr_mult: 2 
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    kernel_size: 3
    kernel_size: 3
    pad: 1
    pad: 1
    pad: 1
    stride: 1
    stride: 2
    stride: 2
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/3x3_2"
  type: "ReLU"
  bottom: "rpn/output_2"
  top: "rpn/output_2"
}

layer {
  name: "rpn/output_pool"
  type: "Pooling"
  bottom: "rpn/output_2"
  top: "rpn/output_pool"
  pooling_param {
    pool: MAX
    kernel_size: 1
    kernel_size: 2
    kernel_size: 2
  }
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output_pool"
  top: "rpn_cls_score"
  param { 
    lr_mult: 1
    decay_mult: 1
  }
  param { 
    lr_mult: 2 
    decay_mult: 0
  }
  convolution_param {
    num_output: 72   # 2(bg/fg) * 19(anchors)
    kernel_size: 1
    kernel_size: 1
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_twin_pred"
  type: "Convolution"
  bottom: "rpn/output_pool"
  top: "rpn_twin_pred"
  param { 
    lr_mult: 1
    decay_mult: 1
  }
  param { 
    lr_mult: 2 
    decay_mult: 0
  }
  convolution_param {
    num_output: 72   # 2 * 19(anchors)
    kernel_size: 1
    kernel_size: 1
    kernel_size: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 dim: 0} }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_twin_targets'
  top: 'rpn_twin_inside_weights'
  top: 'rpn_twin_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 8 \n'scales': !!python/tuple [1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96]"
  }
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}
layer {
  name: "rpn_loss_twin"
  type: "SmoothL1Loss"
  bottom: "rpn_twin_pred"
  bottom: "rpn_twin_targets"
  bottom: 'rpn_twin_inside_weights'
  bottom: 'rpn_twin_outside_weights'
  top: "rpn_loss_twin"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}
layer {
   name: "rpn_accuarcy"
   type: "Accuracy"
   bottom: "rpn_cls_score_reshape"
   bottom: "rpn_labels"
   top: "rpn_accuarcy"
   top: "rpn_accuarcy_class"
   #include: { phase: TEST }
   accuracy_param {
        ignore_label: -1
   }
   propagate_down: false
   propagate_down: false
}





#========= RCNN ============


layer {
  name: 'boxes_to_rois'
  type: 'Python'
  bottom: 'gt_boxes'
  top: 'gt_rois'
  python_param {
    module: 'rpn.GTboxes_to_GTrois'
    layer: 'ProposalTargetLayer'
  }
}
layer { 
  name: "gt_roi_pool5"
  type: "ROIPooling"
  bottom: "conv5b"
  bottom: "gt_rois"
  top: "gt_pool5"
  roi_pooling_param {
    pooled_w: 4
    pooled_h: 4
    pooled_l: 1
    spatial_scale: 0.0625 # 1/16
    temporal_scale: 0.125 # 1/8
  }
}

# ----- 1st fc group -----
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "gt_pool5"
  top: "fc6"
  param {
    name: "fc6_w"
    lr_mult: 1
    decay_mult: 1
  }
  param {
    name: "fc6_b"
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
 name: "drop6"
 type: "Dropout"
 bottom: "fc6"
 top: "fc6"
 dropout_param {
   dropout_ratio: 0.5
 }
}


layer {
   name: 'caption_target'
   type: 'Python'
   bottom: 'gt_captions'
   top: 'input_sentence'
   top: 'cont_sentence'
   top: 'target_sentence'
   top: 'cont_sent_controller'
   python_param {
     module: 'rpn.gt_caption_target_layer_hierarchical'
     layer: 'CaptionTargetLayer'
     param_str: "'num_cont': 29"
   }
}



layer {
  name: "embedding"
  type: "Embed"
  bottom: "input_sentence"
  top: "embedded_input_sentence"
  param {
    lr_mult: 100
  }
  embed_param {
    bias_term: false
    input_dim: 3892  # = vocab_size + 1 (for EOS)
    num_output: 300
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
  }
}
layer {
  name: "embed-drop"
  type: "Dropout"
  bottom: "embedded_input_sentence"
  top: "embedded_input_sentence"
  dropout_param { dropout_ratio: 0.5 }
}

layer {
   name: "embedded_input_sent_reshape_1"
   bottom: "embedded_input_sentence"
   top: "embedded_input_sent_reshape_1"
   type: "Reshape"
   reshape_param { shape { dim: 1 dim: 1 dim: 30 dim: -1 dim: 300} }
}
layer {
  name: "embedded_input_sent_pool_1"
  type: "Pooling"
  bottom: "embedded_input_sent_reshape_1"
  top: "embedded_input_sent_pool_1"
  pooling_param {
    pool: AVE
    kernel_size: 30
    kernel_size: 1
    kernel_size: 1
    stride: 30
    stride: 1
    stride: 1
  }
}
layer {
   name: "embedded_input_sent_pool_reshape_1"
   bottom: "embedded_input_sent_pool_1"
   top: "embedded_input_sent_pool_reshape_1"
   type: "Reshape"
   reshape_param { shape { dim: -1 dim: 1 dim: 300} }
}

layer {
   name: 'pad_controller'
   type: 'Python'
   bottom: 'embedded_input_sent_pool_reshape_1'
   bottom: 'cont_sent_controller'
   top: 'embedded_input_sent_pool_reshape_1_pad'
   python_param {
     module: 'rpn.pad_controller_layer'
     layer: 'CaptionTargetLayer'
     #     param_str: "'num_cont': 20"
   }
}

layer {
  name: "slice-embedded_input"
  type: "Slice"
  bottom: "embedded_input_sent_pool_reshape_1_pad"
  top: "slice_1"
  top: "slice_2"
  slice_param {
    axis: 0
    slice_point: 28
  }
}

layer {
  name: "concat-embedded_input"
  bottom: "slice_2"
  bottom: "slice_1"
  top: "embedded_input_sent_pool_controller"
  type: "Concat"
  concat_param {
    axis: 0
  }
}

### embedded_input_sent_pool_controller: needs padding to get fixed length
layer {
  name: "lstm_controller"
  type: "LSTMController"
  bottom: "embedded_input_sent_pool_controller"
  bottom: "cont_sent_controller"
  bottom: "gt_fc6"
  top: "lstm_controller"
  param {
    lr_mult: 100
  }
  param {
    lr_mult: 100
  }
  param {
    lr_mult: 100
  }
  param {
    lr_mult: 100
  }
  recurrent_param {
    num_output: 20
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# layer {
#   name: "lstm-drop_controller"
#   type: "Dropout"
#   bottom: "lstm_controller"
#   top: "lstm_controller"
#   dropout_param { dropout_ratio: 0.5 }
#   include { stage: "lstm-drop" }
# }
layer {
   name: 'get_controller_hidden'
   type: 'Python'
   bottom: 'lstm_controller'
   bottom: 'cont_sent_controller'
   top: 'lstm_controller_kept'
   python_param {
     module: 'rpn.get_controller_hidden_layer'
     layer: 'CaptionTargetLayer'
     #     param_str: "'num_cont': 20"
   }
}

layer {
   name: "lstm_controller_kept_reshape"
   type: "Reshape"
   bottom: "lstm_controller_kept"
   top: "lstm_controller_gt"
   reshape_param { shape { dim: -1 dim: 20} }
}

layer {
  name: "lstm1_2"
  type: "LSTM"
  bottom: "embedded_input_sentence"
  bottom: "cont_sentence"
  #bottom: "caption_fc6_target"
  top: "lstm1"
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm-drop"
  type: "Dropout"
  bottom: "lstm1"
  top: "lstm1"
  dropout_param { dropout_ratio: 0.5 }
}

layer {
  name: "lstm2_2"
  type: "LSTMTopic"
  bottom: "lstm1"
  bottom: "cont_sentence"
  bottom: "fc6"
  bottom: "lstm_controller_gt"
  top: "lstm2"
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  param { lr_mult: 100 }
  recurrent_param {
    num_output: 512
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "lstm-drop_2"
  type: "Dropout"
  bottom: "lstm2"
  top: "lstm2"
  dropout_param { dropout_ratio: 0.5 }
  include { stage: "lstm-drop" }
}


layer {
  name: "predict"
  type: "InnerProduct"
  bottom: "lstm2"
  top: "predict"
  param {
    lr_mult: 100
    decay_mult: 1
  }
  param {
    lr_mult: 200
    decay_mult: 0
  }
  inner_product_param {
    num_output: 3892  # = vocab_size + 1 (+1 for EOS)
    weight_filler {
      type: "uniform"
      min: -0.08
      max: 0.08
    }
    bias_filler {
      type: "constant"
      value: 0
    }
    axis: 2
  }
}

layer {
  name: "cross_entropy_loss"
  type: "SoftmaxWithLoss"
  bottom: "predict"
  bottom: "target_sentence"
  top: "cross_entropy_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
  }
  softmax_param {
    axis: 2
  }
}
layer {
 name: "lstm_accuracy"
 type: "Accuracy"
 bottom: "predict"
 bottom: "target_sentence"
 top: "lstm_accuracy"
 # include { phase: TEST }
 loss_param {
   ignore_label: -1
 }
 accuracy_param {
   axis: 2
 }
 propagate_down: false
 propagate_down: false
}






